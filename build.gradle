plugins {
    id 'maven-publish'
    id 'base'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE' apply false
    id 'io.freefair.lombok' version '4.1.2' apply false
    id 'com.jfrog.bintray' version "1.8.4" apply false
    id 'com.jfrog.artifactory' version "4.10.0" apply false
    id 'org.ajoberstar.grgit' version "4.0.0"
}

apply from: "https://raw.githubusercontent.com/fortify-ps/gradle-helpers/master/version-helper.gradle"

repositories {
    jcenter()
}

description = 'Utility classes for working with the REST API interfaces provided by the various Fortify products'

subprojects {
	apply plugin: 'java-library'
	apply plugin: 'maven-publish'
	
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	
	repositories {
	    mavenCentral()
	}
	
	test {
	    useJUnitPlatform()
	}
	
	task sourcesJar(type: Jar) {
	    from sourceSets.main.allJava
	    archiveClassifier = 'sources'
	}
	
	task myjavadoc(type: Javadoc) {
	    failOnError = false
	}
	
	task javadocJar(type: Jar) {
	    from myjavadoc
	    archiveClassifier = 'javadoc'
	}
	
	publishing {
	    publications {
	        mavenJava(MavenPublication) {
	            from components.java
	            artifact sourcesJar
	            artifact javadocJar
	        }
	    }
	}
}

configure(subprojects.findAll {new File(it.projectDir, "src/main/lombok").exists()}) {
	apply plugin: 'io.freefair.lombok'

	// TODO For a single-module project we don't have to modify source sets, why do we need this?
	sourceSets {
	    main {
	        java {
	            srcDir 'src/main/lombok'
	        }
	    }
	}
	
	myjavadoc {
		source = delombok
	}
}

allprojects {
	group = 'com.fortify.client.api'
	
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'maven-publish'
	apply plugin: 'com.jfrog.bintray'
	apply plugin: 'com.jfrog.artifactory'

	version = getProjectVersion()
	
	ext {
		dependencyVersion=[
			spring:              '5.2.4.RELEASE',
			log4j:               '2.13.1',
			jersey:              '2.30.1',
			jackson:             '2.10.3',
			httpcore:            '4.4.13',
			httpclient:          '4.5.11',
			rs_api:              '2.1.6',
			commons_lang:        '2.6',
			commons_beanutils:   '1.9.4',
			commons_codec:       '1.14',
			commons_collections: '3.2.2',
			commons_logging:     '1.2',
			guava:               '28.2-jre'
		]
	}
	
	// TODO Instead of defining dependency management in every project,
	//      can we just define this in the root project and reference from
	//      child modules? That would result in cleaner pom.xml files after
	//      publishing. However as Gradle hierarchy is one-way (no parent 
	//      reference), we would probably need to generate pom.xml sections
	//      manually.
	dependencyManagement {
		//imports {
			// Use in API clients: mavenBom("com.fortify.client.api:fortify-client-api:5.4-SNAPSHOT")
		//}
		dependencies {
			// Do we need this to generate Maven BOM?
			dependencySet(group:'com.fortify.client.api', version: "${project.version}") {
				entry 'common-log'
				entry 'common-spring'
				entry 'common-rest'
				entry 'client-api-fod'
				entry 'client-api-ssc'
				entry 'client-api-webinspect'
				entry 'client-api-wie'
			}
			
			dependencySet(group:'org.springframework', version: "${dependencyVersion.spring}") {
				entry 'spring-beans'
				entry 'spring-core'
				entry 'spring-expression'
				entry('spring-context') {
					exclude 'aopalliance:aopalliance'
				}
			}
			
			dependencySet(group:'org.apache.logging.log4j', version: "${dependencyVersion.log4j}") {
				entry 'log4j-api'
				entry 'log4j-core'
				entry 'log4j-jul'
				entry 'log4j-jcl'
			}
			
			dependencySet(group:'org.glassfish.jersey.core', version: "${dependencyVersion.jersey}") {
				entry 'jersey-common'
				entry 'jersey-client'
			}
			// TODO Can we bundle these in dependency set?
			dependency "org.glassfish.jersey.media:jersey-media-multipart:${dependencyVersion.jersey}"
			dependency "org.glassfish.jersey.connectors:jersey-apache-connector:${dependencyVersion.jersey}"
			dependency("org.glassfish.jersey.inject:jersey-hk2:${dependencyVersion.jersey}") {
				exclude 'org.glassfish.hk2.external:aopalliance-repackaged'
			}
			dependency "org.apache.httpcomponents:httpcore:${dependencyVersion.httpcore}"
			dependency "org.apache.httpcomponents:httpclient:${dependencyVersion.httpclient}"
			dependency "jakarta.ws.rs:jakarta.ws.rs-api:${dependencyVersion.rs_api}"
			
			dependencySet(group:'com.fasterxml.jackson.core', version: "${dependencyVersion.jackson}") {
				entry 'jackson-core'
				entry 'jackson-annotations'
				entry 'jackson-databind'
			}
			dependency "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${dependencyVersion.jackson}"
			dependency "commons-lang:commons-lang:${dependencyVersion.commons_lang}"
			dependency "commons-beanutils:commons-beanutils:${dependencyVersion.commons_beanutils}"
			dependency "commons-codec:commons-codec:${dependencyVersion.commons_codec}"
			dependency "commons-collections:commons-collections:${dependencyVersion.commons_collections}"
			dependency "commons-logging:commons-logging:${dependencyVersion.commons_logging}"
			dependency "com.google.guava:guava:${dependencyVersion.guava}"
		}
	}
	
	publishing {
	    publications {
	        mavenJava(MavenPublication) {
	            pom {
	            	version = project.version
	                name = project.name
	                afterEvaluate {
	                	description = project.description
	                }
	                url = 'https://github.com/fortify-ps/fortify-client-api'
	                licenses {
	                    license {
	                        name = 'MIT License'
	                        url = 'https://opensource.org/licenses/MIT'
	                    }
	                }
	                developers {
	                    developer {
	                        id = 'rsenden'
	                        name = 'Ruud Senden'
	                        email = 'ruud.senden@microfocus.com'
	                    }
	                }
	                scm {
	                    developerConnection = 'scm:git:https://github.com/fortify-ps/fortify-client-api.git'
	                }
	            }
	        }
	    }
	}
	// Publish to Maven local repository when publish task is executed
	publish.finalizedBy publishToMavenLocal
	
	bintray {
	    user = System.getenv('BINTRAY_USER')
	    key = System.getenv('BINTRAY_KEY')
	    publications = ['mavenJava']
	    publish = true
	    pkg {
	        repo = 'maven'
	        name = 'fortify-client-api'
	        licenses = ['MIT']
	        vcsUrl = 'https://github.com/fortify-ps/fortify-client-api.git'
	        userOrg = 'fortify-ps'
	    }
	}
	
	artifactory {
	    contextUrl = 'http://oss.jfrog.org'
	    publish {
	        repository {
	            repoKey = 'oss-snapshot-local'
	            username = System.getenv('BINTRAY_USER')
	            password = System.getenv('BINTRAY_KEY')
	        }
	        defaults {
	            publications('mavenJava')
	            publishArtifacts = true
	            publishPom = true
	        }
	    }
	    resolve {
	        repoKey = 'jcenter'
	    }
	    clientConfig.info.setBuildNumber(System.getProperty('build.number'))
	}
}
